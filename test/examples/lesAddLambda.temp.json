{
  "code0": "(lambda (a b) (less a (add b 3)))",
  "code": "(lambda (a b) (math/less a (math/add b 3)))",
  "code2": "(deffun math/add (sum s1 s2)) (deffun math/less (value isLess than)) (lambda (a b) (math/less a (math/add b 3)))",
  "meta": "lambda",
  "v" : "lambda",
  "data" : {
    "name": "lambdaProcess",
    "v" : "lambda",
    "inputPorts": {
      "a": "generic",
      "b": "generic"
    },
    "outputPorts": {
      "value": "generic"
    },
    "implementation": {
      "nodes": [
        {
          "meta": "math/less",
          "name" : "less_0"
        },
        {
          "meta":"math/add",
          "name" : "add_0",
          "values": [
            {
              "value": 3,
              "port": "ARG_2"
            }
          ]
        }
      ],
      "edges": [
        {
          "from": "a",
          "to": "less_0:ARG_1"
        },
        {
          "from": "add_0:ARG_0",
          "to": "less_0:ARG_2"
        },
        {
          "from": "b",
          "to": "add_0:ARG_1"
        }
      ]
    }
  },
  "inputPorts": {},
  "outputPorts": {
    "fn": "lambda"
  }
}

["ARG_1", "ARG_2"]
==
["Z", "Y"]
==
{
  input
}